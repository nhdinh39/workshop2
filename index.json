[
{
	"uri": "/",
	"title": "CI/CD with Github Actions",
	"tags": [],
	"description": "",
	"content": "CI/CD with Github Actions Overview In this lab, we will explore the steps to build a CI/CD pipeline to build a Docker image for a React application and deploy that application to a Docker-running server using GitHub Actions.\nContent 1. Introduction\n2. Preparation\n3. Work with Github Repository\n4. Work with Github Actions\n5. Update and Check\n6. Clean Up Resources\n"
},
{
	"uri": "/4-githubactions/4.1-createsecrets/",
	"title": "Create Secrets",
	"tags": [],
	"description": "",
	"content": "Secrets Secrets is a feature in Github Actions used to store various types of credentials. We can use these secrets as environment variables in the CI/CD workflow without exposing sensitive information.\nBefore proceeding with the following steps, we need to gather and prepare information for the secrets we will create in this section.\nSecret Content Details DOCKER_HUB_USERNAME \u0026lt;your_dockerhub_username\u0026gt; Dockerhub account username DOCKER_HUB_PASSWORD \u0026lt;your_dockerhub_password\u0026gt; Dockerhub account password SSH_PRIVATE_KEY \u0026lt;your_ssh_private_key\u0026gt; Contents from the aws_keypair.pem file SSH_USERNAME ec2-user Default user for SSH into docker_server SSH_HOST \u0026lt;your_ip_address_docker_server\u0026gt; IP Address of the docker_server ec2-user is the default user for Linux Instances created from Amazon Machine Images (AMIs).\nExecution sequence From the interface of your react-app-github-actions repository on Github Select Settings, and you will be directed to the Settings page In the Secrets and variables field, select Actions Select New repository secrets We will be redirected to Actions secrets/New secret page\nAt this interface, we in turn create 5 Sercrets we listed above Create Secret: DOCKER_HUB_USERNAME\nIn the Name field, enter DOCKER_HUB_USERNAME In the Secrets field, enter your Dockerhub username Select Add secret Create Secret: DOCKER_HUB_PASSWORD\nSelect New repository secrets In the Name field, enter DOCKER_HUB_PASSWORD In the Secrets field, enter your Dockerhub password Select Add secret Create Secret: SSH_PRIVATE_KEY\nSelect New repository secrets In the Name field, enter SSH_PRIVATE_KEY In the Secrets field, paste the content copied from the aws_keypair.pem file Select Add secret Create Secret: SSH_USERNAME\nSelect New repository secrets In the Name field, enter SSH_USERNAME In the Secrets field, enter ec2-user Select Add secret Create Secret: SSH_HOST\nSelect New repository secrets In the Name field, enter SSH_HOST In the Secrets field, enter the IP Address of the docker_server saved in step 2.6 Select Add secret Complete Create Secrets step, including 5 secrets "
},
{
	"uri": "/2-preparation/2.1-createvpc/",
	"title": "Create VPC",
	"tags": [],
	"description": "",
	"content": "Execution sequence Go to VPC service management console Select Your VPC Select Create VPC On the Create VPC page: In the Resources field, select VPC only In the Name tag field, enter Lab-VPC In the IPv4 CIDR field, enter 10.10.0.0/16 Select Create VPC Completion of the step to Create VPC Lab-VPC "
},
{
	"uri": "/3-githubrepo/3.1-fork/",
	"title": "Fork Repository",
	"tags": [],
	"description": "",
	"content": "Fork Repository Fork is a feature in Git used to copy a Repository from another owner to your own Github Account. This allows you to use them as your own Repositories, created by yourself.\nExecution sequence From your homepage interface on Github Type /, a search window appears, enter huydinh39/react-simple-app In the Repositories field, select huydinh39/react-simple-app We will be redirected to the repository page react-simple-app of the owner huydinh39 On this interface, select Fork We will be redirected to the Create a new fork page In the Repository name field, enter react-app-github-actions Then select Create fork We have completed Fork Repository from another owner to our own Repository "
},
{
	"uri": "/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "We will learn some key concepts related to this Workshop: CICD Github Github Actions Docker Docker Hub CICD CI stands for Continuous Integration.\nCD stands for Continuous Delivery or Continuous Deployment.\nThe concept of CI/CD generally refers to automation in the software development and product delivery process, making integration faster and the finished product delivered to users within a the shortest time.\nGithub Github is a platform that serves as both a project management system and a versioncontrol system. This platform is often likened to a social network designed specifically for programmers. On GitHub, coders have the ability to clone source code from a repository.\nGitHub also functions as a repository hosting service. Its purpose is to store code, allowing individuals to create their own accounts and repositories. As a result, whenever you need to reuse code, you can quickly find and utilize it with ease.\nGithub Actions Github Actions helps us automate the software development process where we store our code and associate it with pull requests and issues. We can write individual tasks, called actions, and combine those actions to create a workflow of our own. Workflows are automated processes that you can set up in your repository to build, test, publish a package, release, or deploy any project on Github.\nWith Github Actions, we can integrate Continuous Integration (CI) and Continuous Deployment (CD) directly into our repository.\nDocker Docker is a software platform that allows you to build, test, and deploy applications quickly. Docker packages software into standardized units called containers that have everything the software needs to run, including libraries, system tools, code, and runtime.\nBy utilizing Docker, you can quickly deploy and scale your application to any environment and know with certainty that your code will run.\nDocker Hub Docker Hub is a service provided by Docker that enables you to search for and share container images.\nIt serves as a platform where you can store your packaged programs (images) and search for images published by others.\n"
},
{
	"uri": "/5-updatecheck/5.1-updatecode/",
	"title": "Update Code",
	"tags": [],
	"description": "",
	"content": "Execution sequence In the Terminal interface within Visual Studio Code Execute the command git pull to update all the latest changes from your Github Repository to your local machine git pull In the src directory, select App.js, and then make changes \u0026lt;p\u0026gt;Welcome to React-Simple-App\u0026lt;br /\u0026gt; To\n\u0026lt;p style={{color: \u0026#34;#32ff7e\u0026#34;}}\u0026gt;Welcome to React-Simple-App\u0026lt;br /\u0026gt; The purpose is to change the color of the text in the App from white to green. You can understand this better in the next check step.\nSave the changes. Then proceed to push code to our Github Repository.\nBy executing the following commands step by step. You can refer to the function of each command in step 3.5 git add .\rgit commit -m \u0026#34;Edit Text Color\u0026#34;\rgit push Now we have completed Update Code step. Next, we will proceed to Check CI/CD Process Again "
},
{
	"uri": "/5-updatecheck/5.2-checkagain/",
	"title": "Check CI/CD Process Again",
	"tags": [],
	"description": "",
	"content": "Execution sequence From the interface of your react-app-github-actions repository on GitHub Choose Actions, and you will be redirected to the Actions interface In the All workflows section, you\u0026rsquo;ll see a running workflow named Edit Text Color, which is the commit message from step 5.1 Wait for about 2-3 minutes, then in the Actions interface, you\u0026rsquo;ll see that the Edit Text Color workflow has completed Open a new web browser tab, access the link using the format http://\u0026lt;your_ip_address_docker_server\u0026gt;:3000, and view the results\nWith \u0026lt;your_ip_address_docker_server\u0026gt; is the Publish IP address of your docker_server\nAlternatively, you can reload the window opened in step 4.3\nYou\u0026rsquo;ll see that the color of the text has changed from white to green\nWe have completed the Update and Check CI/CD Process step Congratulations! We have completed the lab. Next, we will clean up the resources on AWS to avoid incurring costs.\n"
},
{
	"uri": "/3-githubrepo/3.2-createtoken/",
	"title": "Create Access Token",
	"tags": [],
	"description": "",
	"content": "Access Token We need to create an Access Token to perform actions such as push, pull, commit, and modify repositories.\nExecution sequence From your Github homepage interface Click on the user avatar icon in the top right corner, select Settings We will be redirected to the Settings page Scroll down to the bottom, select Developer Settings In the Developer Settings page, scroll down to the bottom. In the Personal access tokens field, select Tokens (classic) In the Personal access tokens (classic) field, select Generate new token, then select General new tokens (classic)\n(Note: At this step, Github might ask you to provide your login password) We will be redirected to the New personal access tokens (classic) page In the Note field, enter github_token In the Select scopes field, select two options: repo and workflow Scroll down to the bottom, select Generate token We will be provided with a new token. Save this token for use in the next steps token will only appear once after creation, and it will disappear if you reload the page. So, be sure to save it carefully.\n"
},
{
	"uri": "/2-preparation/2.2-createsubnet/",
	"title": "Create Public Subnet",
	"tags": [],
	"description": "",
	"content": "Execution sequence In the VPC interface Select Subnets Select Create subnet On the Create subnet page In the VPC ID field, select Lab-VPC In the Subnet name field, enter Lab-PUS In the Availability Zone field, select the First availability zone or select No preference In the IPv4 CIDR block field, enter 10.10.1.0/24 Scroll down to the bottom of the page, then select Create subnet Completion of creating Lab-PUS Select Lab-PUS\nSelect Actions Select Edit subnet settings The Edit subnet settings page appears In the Auto-assign IP settings field, select Enable auto-assign public IPv4 address Select Save Completion of the step to Create Publish Subnet Lab-PUS "
},
{
	"uri": "/4-githubactions/4.2-createworkflow/",
	"title": "Create Workflow",
	"tags": [],
	"description": "",
	"content": "Workflow A workflow is an automated procedure, created by one or more jobs. These jobs can run on a schedule or be triggered by specific events.\nIn other words, a workflow is a combination of steps to build a CI/CD pipeline.\nExecution sequence From the interface of your react-app-github-actions repository on Github Select Actions, and you will be redirected to the Get started with GitHub Actions page Select set up a workflow yourself We will be redirected to Code page to Edit Workflow We will proceed to understand each step to build the Workflow\nFirst, we name the Workflow as CI/CD name: CI/CD Next, we define the trigger event for the workflow, which is when there\u0026rsquo;s a push event on the main branch.\nYou can add other branches if your Github Repository has multiple branches. # Trigger by push event on branch main\ron:\rpush:\rbranches:\r- main Next, we define the environment variables for this Workflow, using 5 Secrets that were created in step 4.1.\nDOCKER_HUB_REPOSITORIES is the variable for naming our repository on Dockerhub. Here, we set it by default to be the same as the name of the repository on Github. # Define all environment variables (Previously defined in secrets and variables)\renv:\rDOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}\rDOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}\rDOCKER_HUB_REPOSITORIES: react-app-github-actions\rSSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}\rSSH_USERNAME: ${{ secrets.SSH_USERNAME }}\rSSH_HOST: ${{ secrets.SSH_HOST }} Next is the most important part, the jobs section, which will contain the jobs responsible for the CI/CD process.\nHere, we divide it into 2 jobs:\nbuild-and-push deploy We will go into more detail about each job.\nbuild-and-push runs-on: ubuntu-22.04, here we define the platform on which the job will run, and in this case, we choose ubuntu-22.04 steps, here we define the steps to be executed in this job: name: Checkout code, checkout to copy the source code from the current repository to the ubuntu-22.04 server name: Login to Docker Hub, login to our Dockerhub account name: Build and Push Image to Docker Hub, we will proceed to build the image and push it to our Dockerhub docker build -t $DOCKER_HUB_USERNAME/$DOCKER_HUB_REPOSITORIES:latest .\nCommand to build the image, note that the \u0026quot;.\u0026quot; means using the Dockerfile in the current directory (which is the Github Repository) docker push $DOCKER_HUB_USERNAME/$DOCKER_HUB_REPOSITORIES:latest\nCommand to push the image to Dockerhub # Define all jobs, include two jobs are build-and-push and deploy\rjobs:\r# build-and-push job\rbuild-and-push:\r# Choosing the runner for jobs is ubuntu-22.04\rruns-on: ubuntu-22.04\rsteps:\r# Checkout Code to copy source code from Github Reporsitories to runner (ubuntu-22.04) in the GitHub Actions process.\r- name: Checkout code\ruses: actions/checkout@v2\r# Login to Docker Hub\r- name: Login to Docker Hub\rrun: docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD\r# Build and Push Image to Docker Hub\r- name: Build and Push Image to Docker Hub\rrun: |\rdocker build -t $DOCKER_HUB_USERNAME/$DOCKER_HUB_REPOSITORIES:latest . docker push $DOCKER_HUB_USERNAME/$DOCKER_HUB_REPOSITORIES:latest deploy needs: build-and-push, this job only runs when the build-and-push job has completed. runs-on: ubuntu-22.04, here we define the platform on which the job will run, and in this case, we choose ubuntu-22.04. steps, here we define the steps to be executed in this job: name: Deploy to server, pull the latest image from Dockerhub and deploy it to the docker_server. echo \u0026quot;$SSH_PRIVATE_KEY\u0026quot; \u0026gt; sshkey.pem\nPaste the SSH_PRIVATE_KEY into the sshkey.pem file. chmod 400 sshkey.pem\nGrant read permission to the sshkey.pem file to prepare for the following ssh steps. ssh -o StrictHostKeyChecking=no -i sshkey.pem $SSH_USERNAME@$SSH_HOST \u0026quot;docker pull $DOCKER_HUB_USERNAME/$DOCKER_HUB_REPOSITORIES:latest\u0026quot;\nSSH command to the docker_server to execute the docker pull command to pull the latest image from Dockerhub. ssh -o StrictHostKeyChecking=no -i sshkey.pem $SSH_USERNAME@$SSH_HOST \u0026quot;docker rm -f react-app\u0026quot;\nSSH command to the docker_server to execute the docker rm command to remove the existing react-app container if it exists, allowing the next step to run a new container. ssh -o StrictHostKeyChecking=no -i sshkey.pem $SSH_USERNAME@$SSH_HOST \u0026quot;docker run -d -p 3000:3000 --name react-app $DOCKER_HUB_USERNAME/$DOCKER_HUB_REPOSITORIES:latest\u0026quot;\nSSH command to the docker_server to execute the docker run command to run the react-app container, mapping it to port 3000 on the host (docker_server) with the latest pulled image. # deploy job\rdeploy:\r# deploy only run when build-and-push completed\rneeds: build-and-push\r# Choosing the runner for jobs is ubuntu-22.04\rruns-on: ubuntu-22.04\rsteps:\r- name: Deploy to server\rrun: |\r# Paste SSH_PRIVATE_KEY to sshkey.pem\recho \u0026#34;$SSH_PRIVATE_KEY\u0026#34; \u0026gt; sshkey.pem\r# Change mode read for sshkey.pem\rchmod 400 sshkey.pem\r# Pull image latest\rssh -o StrictHostKeyChecking=no -i sshkey.pem $SSH_USERNAME@$SSH_HOST \u0026#34;docker pull $DOCKER_HUB_USERNAME/$DOCKER_HUB_REPOSITORIES:latest\u0026#34;\r# Remove container react-app if existed\rssh -o StrictHostKeyChecking=no -i sshkey.pem $SSH_USERNAME@$SSH_HOST \u0026#34;docker rm -f react-app\u0026#34;\r# Run new container react-app on port 3000\rssh -o StrictHostKeyChecking=no -i sshkey.pem $SSH_USERNAME@$SSH_HOST \u0026#34;docker run -d -p 3000:3000 --name react-app $DOCKER_HUB_USERNAME/$DOCKER_HUB_REPOSITORIES:latest\u0026#34; In the above SSH commands, the StrictHostKeyChecking=no option is used to bypass the request for server host key verification when establishing SSH connections from client machines.\nFinally, we have a complete Workflow in place name: CI/CD\r# Trigger by push event on branch main\ron:\rpush:\rbranches:\r- main\r# Define all environment variables (Previously defined in secrets and variables)\renv:\rDOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}\rDOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}\rDOCKER_HUB_REPOSITORIES: react-app-github-actions\rSSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}\rSSH_USERNAME: ${{ secrets.SSH_USERNAME }}\rSSH_HOST: ${{ secrets.SSH_HOST }}\r# Define all jobs, include two jobs are build-and-push and deploy\rjobs:\r# build-and-push job\rbuild-and-push:\r# Choosing the runner for jobs is ubuntu-22.04\rruns-on: ubuntu-22.04\rsteps:\r# Checkout Code to copy source code from Github Reporsitories to runner (ubuntu-22.04) in the GitHub Actions process.\r- name: Checkout code\ruses: actions/checkout@v2\r# Login to Docker Hub\r- name: Login to Docker Hub\rrun: docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD\r# Build and Push Image to Docker Hub\r- name: Build and Push Image to Docker Hub\rrun: |\rdocker build -t $DOCKER_HUB_USERNAME/$DOCKER_HUB_REPOSITORIES:latest . docker push $DOCKER_HUB_USERNAME/$DOCKER_HUB_REPOSITORIES:latest\r# deploy job\rdeploy:\r# deploy only run when build-and-push completed\rneeds: build-and-push\r# Choosing the runner for jobs is ubuntu-22.04\rruns-on: ubuntu-22.04\rsteps:\r- name: Deploy to server\rrun: |\r# Paste SSH_PRIVATE_KEY to sshkey.pem\recho \u0026#34;$SSH_PRIVATE_KEY\u0026#34; \u0026gt; sshkey.pem\r# Change mode read for sshkey.pem\rchmod 400 sshkey.pem\r# Pull image latest\rssh -o StrictHostKeyChecking=no -i sshkey.pem $SSH_USERNAME@$SSH_HOST \u0026#34;docker pull $DOCKER_HUB_USERNAME/$DOCKER_HUB_REPOSITORIES:latest\u0026#34;\r# Remove container react-app if existed\rssh -o StrictHostKeyChecking=no -i sshkey.pem $SSH_USERNAME@$SSH_HOST \u0026#34;docker rm -f react-app\u0026#34;\r# Run new container react-app on port 3000\rssh -o StrictHostKeyChecking=no -i sshkey.pem $SSH_USERNAME@$SSH_HOST \u0026#34;docker run -d -p 3000:3000 --name react-app $DOCKER_HUB_USERNAME/$DOCKER_HUB_REPOSITORIES:latest\u0026#34; After you have a complete Workflow, select Commit Changes The Commit changes window will appear:\nIn the Commit message field, enter Create main.yml for Github Actions Workflows Select Commit directly to the main branch Select Commit changes Complete Create Workflow step. Next, we will proceed to the Check CI/CD Process "
},
{
	"uri": "/2-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "In this step, we will sequentially create:\n1 VPC 1 Public Subnet 1 Internet Gateway 1 Route Table 1 Security Group 1 EC2 instance with Docker installed The architecture overview after completing this step will be as follows\nContent 2.1 Create VPC\n2.2 Create Public Subnet\n2.3 Create Internet Gateway\n2.4 Create Route Table\n2.5 Create Security Group\n2.6 Create EC2 Instance\n2.7 Install Docker\n"
},
{
	"uri": "/4-githubactions/4.3-check/",
	"title": "Check CI/CD Process",
	"tags": [],
	"description": "",
	"content": "Execution sequence From the interface of your react-app-github-actions repository on Github Select Actions, we will be redirected to the Actions interface\nIn the All workflows section, you\u0026rsquo;ll see a workflow running named Create main.yml for Github Actions Workflows, which corresponds to the commit message we executed in step 4.2 Select Create main.yml for Github Actions Workflows, and you\u0026rsquo;ll get a more detailed view of this Workflow, including the build and push and deploy jobs You can also click on build and push to view more details about this job Once the build and push job is completed, you can log in to Dockerhub to check. At this point, you\u0026rsquo;ll see the react-app-github-actions repository just appeared Return to the Actions interface. When the Create main.yml for Github Actions Workflows workflow is completed Open a new web browser, access the link following the format http://\u0026lt;your_ip_address_docker_server\u0026gt;:3000, and see the result\nWith \u0026lt;your_ip_address_docker_server\u0026gt; being the IP address of your docker_server This means your application has been successfully deployed to the docker_server\nSo, you have completed the Check CI/CD Process step. Next, we will proceed to update the code and then recheck the CI/CD process "
},
{
	"uri": "/3-githubrepo/3.3-clone/",
	"title": "Clone Repository",
	"tags": [],
	"description": "",
	"content": "Clone Repository Clone is a feature similar to Fork. Clone allows you to create a complete copy of the repository data stored on the server, including its entire history. With Clone, you can revert to any step, even after committing.\nWe will proceed to clone our repository that we performed in step 3.1 using the following syntax:\ngit clone https://\u0026lt;your_token\u0026gt;@github.com/\u0026lt;your_github_user_name\u0026gt;/\u0026lt;your_repository_name\u0026gt;.git With:\n\u0026lt;your_token\u0026gt; : The token you saved in step 3.2 \u0026lt;your_github_user_name\u0026gt; : Your Github account username \u0026lt;your_repository_name\u0026gt; : The repository name you changed when Fork Repository in step 3.1 Before proceeding with the steps below, ensure that you have installed Git Bash and Visual Studio Code on your computer.\nIf not, you can download them here:\nDownload Git bash\nDownload Visual Studio Code\nExecution sequence Choose a folder where you want to store your Github Repository Right-click in the empty area of the folder, then select Git Bash Here The Git Bash interface will appear At this interface, we execute the command git clone using the above mentioned syntax. Please change the information to suit you git clone https://\u0026lt;your_token\u0026gt;@github.com/\u0026lt;your_github_user_name\u0026gt;/\u0026lt;your_repository_name\u0026gt;.git Continue to change directory with the command cd to the git directory I just cloned. cd \u0026lt;your_repository_name\u0026gt;/ Open current directory with Visual Studio Code code . In the Visual Studio Code interface just opened In the Explorer area, right-click and select Open in Integrated Terminal In the opened Terminal interface Press the down arrow and select Git Bash or another suitable CLI based on your preference We have completed step Clone Repository and prepared the working environment for the next steps "
},
{
	"uri": "/2-preparation/2.3-createigw/",
	"title": "Create Internet Gateway",
	"tags": [],
	"description": "",
	"content": "Execution sequence In the VPC interface Select Internet Gateways Select Create internet gateway On the Create internet gateway page In the Name tag field, enter Lab-IGW Select Create internet gateway After successfully creating Lab-IGW Select Attach to VPC On the Attach to VPC page In the Available VPCs field, select Lab-VPC Select Attach internet gateway Complete Attach VPC Lab-VPC to Internet Gateway Lab-IGW "
},
{
	"uri": "/3-githubrepo/",
	"title": "Work with Github Repository",
	"tags": [],
	"description": "",
	"content": "\nIn this step, we will perform actions with the Github Repository.\nContent 3.1 Fork Repository 3.2 Create Access Token 3.3 Clone Repository 3.4 Create Dockerfile 3.5 Push Repository\n"
},
{
	"uri": "/3-githubrepo/3.4-createdockerfile/",
	"title": "Create Dockerfile",
	"tags": [],
	"description": "",
	"content": "Dockerfile Dockerfile is a text file without an extension that contains all the commands that a user defines for an executable software environment.\nFrom these commands, Docker will build an image (typically ranging in size from a few MBs to several GBs).\nExecution sequence In the Terminal interface within Visual Studio Code, which was prepared in step 3.3 Execute the command touch Dockerfile to create Dockerfile touch Dockerfile You will see the Dockerfile appear in the Explorer section We will proceed to understand each step to create the Dockerfile Choose the base image as node:16-alpine. Alpine is a base image with the smallest size, high performance for launching and running applications, and comes with Node.js v16 pre-installed # Select base image node:16-alpine\rFROM node:16-alpine Select user node as default user # Set user node\rUSER node Create a new path /home/node/app # Create directory /home/node/app\rRUN mkdir /home/node/app Set the default working directory to /home/node/app. When we execute the docker exec command inside the container, the default home directory will be this path.\nCommands after the WORKDIR instruction in Docker will all be executed within the path /home/node/app # Set working directory /home/node/app\rWORKDIR /home/node/app Copy all resources from the current working directory to the /home/node/app directory of the container and change the ownership of these resources to user node and group node # Copy and change the owner and group all files from current directory to /home/node/app\rCOPY --chown=node:node . . Run the npm install command to install all the necessary dependencies for the application defined in the package.json file # Install all dependences for App\rRUN npm install Expose a port for the container to map ports from the host machine when running the application in the future # Expose port for App\rEXPOSE 3000 Run npm start command each time the container is run # Run the command \u0026#34;npm start\u0026#34; every time run App\rCMD [\u0026#34;npm\u0026#34;, \u0026#34;start\u0026#34;] Finally, we have a complete Dockerfile # Select base image node:16-alpine\rFROM node:16-alpine\r# Set user node\rUSER node\r# Create directory /home/node/app\rRUN mkdir /home/node/app\r# Set working directory /home/node/app\rWORKDIR /home/node/app\r# Copy and change the owner and group all files from current directory to /home/node/app\rCOPY --chown=node:node . .\r# Install all dependences for App\rRUN npm install\r# Expose port for App\rEXPOSE 3000\r# Run the command \u0026#34;npm start\u0026#34; every time run App\rCMD [\u0026#34;npm\u0026#34;, \u0026#34;start\u0026#34;] Save Dockerfile You have completed the Create Dockerfile step for your project.\nNext will be the Push step to upload the changes (in this case, the Add Dockerfile) to our repository "
},
{
	"uri": "/2-preparation/2.4-creatertb/",
	"title": "Create Route Table",
	"tags": [],
	"description": "",
	"content": "Execution sequence In the VPC interface Select Route Tables Select Create route table On the Create route table page In the Name field, enter Lab-RTB In the VPC field, select Lab-VPC Select Create route table On the Lab-RTB page we just created Select the Subnet associations tab Select Edit subnet associations to proceed to associate Lab-RTB we just created into Publish Subnet Lab-PUS created in step 2.2 On the Edit subnet associations page Select Lab-PUS Select Save associations Return to the information page of Lab-RTB Select the Routes tab Select Edit routes On the Edit routes page Select Add route In the Destination field, enter 0.0.0.0/0 In the Target field, select Internet Gateway, and then select Lab-IGW that you created in step 2.3 Select Save changes Completion of the step to Create Route Table Lab-RTB, and you can now verify that the route directing traffic to the internet is pointed to Internet Gateway Lab-IGW "
},
{
	"uri": "/4-githubactions/",
	"title": "Work with Github Actions",
	"tags": [],
	"description": "",
	"content": "\nIn this section, we will proceed with the steps to create a complete CI/CD workflow using Github Actions.\nContent 4.1 Create Secrets\n4.2 Create Workflows\n4.3 Check CI/CD Process\n"
},
{
	"uri": "/2-preparation/2.5-createsg/",
	"title": "Create Security Group",
	"tags": [],
	"description": "",
	"content": "Execution sequence In the VPC interface Select Security Group Select Create security group In the Security group name field, enter Lab-SG In the Description field, enter Allow SSH, All ICMP-IPv4, TCP 3000 for Docker Server In the VPC field, click the X icon to select Lab-VPC In the Inbound rule section, select Add rule to add the following 3 Inbound rules according to the table below Type Protocol Port range Source SSH TCP 22 Anywhere-IPv4, 0.0.0.0/0 All ICMP - IPv4 ICMP All Anywhere-IPv4, 0.0.0.0/0 Custom TCP TCP 3000 Anywhere-IPv4, 0.0.0.0/0 Inbound rule for SSH:\nSelect Add rule In the Type field, select SSH, and in the Source field, select Anywhere (0.0.0.0/0) Inbound rule for Ping:\nSelect Add rule In the Type field, select All ICMP - IPv4, and in the Source field, select Anywhere (0.0.0.0/0) Inbound rule for App:\nSelect Add rule In the Type field, select Custom TCP, in the Port field, enter 3000, and in the Source field, select Anywhere (0.0.0.0/0) Keep the Outbound rule as is\nSelect Create security group Completion of the step to Create Security Group Lab-SG "
},
{
	"uri": "/3-githubrepo/3.5-push/",
	"title": "Push Repository",
	"tags": [],
	"description": "",
	"content": "Push Repository Push is a feature in Github used to update all changes from the local machine to a remote repository.\nExecution sequence In the Terminal interface within Visual Studio Code Execute the command git add . to save all your changes to the staging area in Git git add . Execute the command git commit -m \u0026quot;Add Dockerfile\u0026quot; to create a commit and store the changes after using the git add . command in the project\u0026rsquo;s history. The commit message is Add Dockerfile git commit -m \u0026#34;Add Dockerfile\u0026#34; Execute the command git push to synchronize the changes that were confirmed in the git add . and git commit -m \u0026quot;Add Dockerfile\u0026quot; steps to the remote repository git push In the interface of your react-app-github-actions repository on Github\nYou will see that the Dockerfile has been added to our Repository with the commit message Add Dockerfile Complete Push Repository step\n"
},
{
	"uri": "/5-updatecheck/",
	"title": "Update and Check",
	"tags": [],
	"description": "",
	"content": "Update and Check In this step, to better understand how the CI/CD process will happen, we will update the code, push the code, and then check the CI/CD process again.\nContent 5.1 Update Code\n5.2 Check CI/CD Process Again\n"
},
{
	"uri": "/6-cleanup/",
	"title": "Clean Up Resources",
	"tags": [],
	"description": "",
	"content": "We will proceed with the following steps to delete the resources we created in this lab.\nDelete EC2 Instance Go to EC2 service management console\nSelect Instances Select docker_server instance Select Instance state Select Terminate instance, then select Terminate to confirm Delete VPC Go to VPC service management console\nSelect Your VPCs Select Lab-VPC Select Actions Select Delete VPC In the confirm box, type delete to confirm Then select Delete to perform the deletion of Lab VPC and related resources "
},
{
	"uri": "/2-preparation/2.6-createec2/",
	"title": "Create EC2 Instance",
	"tags": [],
	"description": "",
	"content": "Execution sequence Go to EC2 service management console Select Instances\nSelect Launch instances In the Name field, enter docker_server\nIn the Amazon Machine Image (AMI) field, select Amazon Linux 2 AMI In the Instance type field, choose t2.micro\nIn the Key pair (login) field, select Create new key pair On the Create new key pair page In the Key pair name field, enter aws_keypair In the Key pair type field, select RSA In the Private key file format field, select .pem Then select Create key pair and save the aws_keypair.pem file on your computer to use for the SSH service in the next steps In the Network settings section, select Edit In the VPC field, select Lab-VPC In the Subnet field, select Lab-PUS In the Auto-assign Public IP field, select Enable, unless you have already enabled Enable auto-assign public IPv4 address in step 2.2 In the Firewall (security groups) field, select Select existing security group, and select Lab-SG Review the information and select Launch instance Wait for about 3-5 minutes and then access the EC2 service management console again Select Instance Select docker_server In the Details tab, save the IP address information of the EC2 Instance in the Public IPv4 address field for the next steps "
},
{
	"uri": "/2-preparation/2.7-installdocker/",
	"title": "Install Docker",
	"tags": [],
	"description": "",
	"content": "Execution sequence First, we need to SSH into the EC2 Instance that we created in step 2.6 Here, I will use MobaXterm. You can find more detailed instructions in How to Connect to an EC2 Instance using MobaXterm Select Session Select SSH In the Remote host field, enter the Public IP address of the EC2 Instance that you saved in step 2.6 Select Specify username and enter ec2-user Select Advange SSH Settings Select use private key, and then browse to the path of the aws_keypair.pem file you saved in step 2.6 Select OK ec2-user is the default user for Linux Instances created from Amazon Machine Images (AMIs)\nYou\u0026rsquo;ll see a successful connection as shown below\nNext, we proceed to execute the commands to install Docker Update the pending updates sudo yum update -y Install docker sudo yum install docker -y Add ec2-user to the docker group sudo usermod -aG docker ec2-user Activate the docker service to run on startup sudo systemctl enable docker.service Run docker service sudo systemctl start docker.service Check the status of the docker service sudo systemctl status docker.service We can see that the docker service is currently running, indicating that we have successfully Installed Docker on the EC2 Instance "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]